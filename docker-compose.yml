services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: assetdna-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: assetdna
      POSTGRES_PASSWORD: assetdna2024
      POSTGRES_DB: assetdna
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "10432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assetdna -d assetdna"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - assetdna-network

  # Portainer - Web UI for Docker management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: assetdna-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - assetdna-network

  # Main Application
  assetdna:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: assetdna-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PORT: 10001
      HOST: 0.0.0.0
      DEBUG: "true"
      DATABASE_URL: "postgresql+asyncpg://assetdna:assetdna2024@postgres:5432/assetdna"
      DATABASE_ECHO: "false"
      CORS_ORIGINS: '["*"]'
      MAX_UPLOAD_SIZE: "104857600"
      UPLOAD_PATH: "/app/uploads"
      URN_PREFIX: "urn:assetdna"
    volumes:
      - ./app:/app/app:ro
      - ./main.py:/app/main.py:ro
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "10001:10001"
    networks:
      - assetdna-network
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "10001", "--reload"]

networks:
  assetdna-network:
    driver: bridge

volumes:
  postgres_data:
  portainer_data: